#!/bin/bash

# Test script to verify enhanced HTTP communication logging
# This script tests the enhanced logging functionality with a local CGI setup

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üß™ Testing Enhanced HTTP Communication Logging${NC}"
echo "================================================="
echo ""

# Test with local CGI execution (simulating the enhanced logging)
echo -e "${CYAN}Testing: Device GetCapabilities (Local CGI)${NC}"
echo "Service: device_service"
echo "Request: test_getcapabilities.xml"

# Check if test file exists
if [ ! -f "$SCRIPT_DIR/test_getcapabilities.xml" ]; then
    echo -e "${RED}‚ùå FAIL: Test file not found: $SCRIPT_DIR/test_getcapabilities.xml${NC}"
    exit 1
fi

# Display request URL (simulated)
echo -e "${BLUE}üåê Request URL:${NC} http://localhost/onvif/device_service"

# Display raw XML request
echo -e "${BLUE}üì§ Raw XML Request:${NC}"
echo "----------------------------------------"
cat "$SCRIPT_DIR/test_getcapabilities.xml" | xmllint --format - 2>/dev/null || cat "$SCRIPT_DIR/test_getcapabilities.xml"
echo "----------------------------------------"

# Execute the request using local CGI simulation
echo -e "${BLUE}üîß Executing Local CGI Request...${NC}"

# Set up CGI environment and execute
cd "$PROJECT_ROOT" || exit 1
mkdir -p xml
cd xml || exit 1

response=$(echo '<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:tds="http://www.onvif.org/ver10/device/wsdl">
   <soap:Header/>
   <soap:Body>
      <tds:GetCapabilities/>
   </soap:Body>
</soap:Envelope>' | REQUEST_METHOD=POST CONTENT_TYPE="application/soap+xml" SCRIPT_NAME="/cgi-bin/device_service" CONTENT_LENGTH=220 ../onvif_simple_server_debug device_service -c ../test_config/unified_onvif.json 2>/dev/null)

# Display HTTP status code (simulated as 200 for successful local execution)
echo -e "${BLUE}üìä HTTP Status Code:${NC} 200"

# Display raw XML response
echo -e "${BLUE}üì• Raw XML Response:${NC}"
echo "========================================"
if [[ -n "$response" ]]; then
    echo "$response" | xmllint --format - 2>/dev/null || echo "$response"
else
    echo -e "${RED}No response received${NC}"
fi
echo "========================================"

# Test evaluation
echo -e "${BLUE}üîç Test Evaluation:${NC}"
echo "Expected pattern: RelayOutputs"
if [[ "$response" =~ RelayOutputs ]]; then
    echo -e "${GREEN}‚úÖ PASS: Response contains expected pattern${NC}"
else
    echo -e "${RED}‚ùå FAIL: Response does not contain expected pattern${NC}"
    exit 1
fi

# Show response highlights
echo -e "${BLUE}üìã Response Highlights:${NC}"
if [[ "$response" =~ \<tt:RelayOutputs\>([^<]*)\</tt:RelayOutputs\> ]]; then
    echo -e "üìä RelayOutputs: ${GREEN}${BASH_REMATCH[1]}${NC}"
fi

if [[ "$response" =~ \<tt:Manufacturer\>([^<]*)\</tt:Manufacturer\> ]]; then
    echo -e "üìä Manufacturer: ${GREEN}${BASH_REMATCH[1]}${NC}"
fi

if [[ "$response" =~ \<tt:Model\>([^<]*)\</tt:Model\> ]]; then
    echo -e "üìä Model: ${GREEN}${BASH_REMATCH[1]}${NC}"
fi

echo ""
echo "=================================================="
echo ""
echo -e "${GREEN}üéâ Enhanced logging test completed successfully!${NC}"
echo -e "${CYAN}The enhanced test script now provides:${NC}"
echo "‚Ä¢ Complete request URLs"
echo "‚Ä¢ Formatted XML requests"
echo "‚Ä¢ Formatted XML responses"
echo "‚Ä¢ HTTP status codes"
echo "‚Ä¢ Clear test evaluation"
echo "‚Ä¢ Response highlights"
echo ""
